#!/usr/bin/env ruby

require 'optparse'
require 'oneenvHelper'

options = {}

optparse = OptionParser.new do|opt|
  opt.banner = "Usage: oneenv COMMAND [OPTIONS]"
  opt.separator  ""
  opt.separator  "Commands"
  opt.separator  "     add: add a new a cookbok to the repo"
  opt.separator  "     list: list all cookbooks"
  opt.separator  "     import-repo: import all the cookbooks to the repo"
  opt.separator  "     delete: delete a cookbook"
  opt.separator  "     show: prints the information of the cookbook"
  opt.separator  "     update-cb: stop server"
  opt.separator  "     check: check the cookbook's dependencies"
  opt.separator  ""
  opt.separator  "Options"

   options[:path] = nil
   opt.on( '-s', '--path PATH', 'This is the databag,chef or node path' ) do |path|
     options[:path] = path
   end

   options[:name_env] = nil
   opt.on( '-n', '--name NAME_ENV', 'References eviroment by Name' ) do |name_env|
     options[:name_env] = name_env
   end

   options[:id_env] = nil
   opt.on( '-i', '--id ID_ENV', 'References eviroment by Id' ) do |id_env|
     options[:id_env] = id_env

   end


  opt.on("-h","--help","help") do
    puts opt_parser
  end


end


begin 
optparse.parse!

PATH_DATABAG=options[:path]		
NAME_ENV=options[:name_env]		
ID_ENV=options[:id_env]


case ARGV[0]

	##USO: oneenv create NAME ID_TEMPLATE NODE_PATH [DATABAG_PATH]
	when 'create'
		raise ArgumentError if ARGV.length !=4 
		NAME=ARGV[1]
		ID_TEMPLATE=ARGV[2]
		NODE_PATH=ARGV[3]
		OneEnvHelper.create(NAME,ID_TEMPLATE,NODE_PATH,PATH_DATABAG)		
	##USO:oneenv list
	when "list"
		raise ArgumentError if ARGV.length != 1
		OneEnvHelper.list

	##USO:oneenv clone [-i ID_CB]|[-n NAME]
	when "clone"
		raise ArgumentError if ARGV.length != 1
		puts 
		OneEnvHelper.clone(ID_ENV,NAME_ENV)

	##USO:oneenv show [-i ID_CB]|[-n NAME]
	when "show"
		raise ArgumentError if ARGV.length != 1
		OneEnvHelper.show(ID_ENV,NAME_ENV)

	##USO:oneenv delete [-i ID_CB]|[-n NAME]
	when "delete"
		raise ArgumentError if ARGV.length != 1
		OneEnvHelper.delete(ID_ENV,NAME_ENV)

	##USO: oneenv update-node [-i ID_CB]|[-n NAME] [NODE_PATH]
	when "update-node"
		raise ArgumentError if ARGV.length != 2
		NODE_PATH=ARGV[1]
		OneEnvHelper.updateNode(ID_ENV,NAME_ENV,NODE_PATH)

	##USO oneenv set-databags [-i ID_CB]|[-n NAME] [DB_PATH]
	when "set-databags"
		#DB_PATH creo que es un argumento obligatorio
		raise ArgumentError if ARGV.length != 2  		
		DB_PATH=ARGV[2]
		OneEnvHelper.setDatabag(ID_ENV,NAME_ENV,DB_PATH)

	##USO:oneenv up [-i ID_CB]|[-n NAME] [CHEF_PATH]
	when "up"
		raise ArgumentError if ARGV.length != 2
		OneEnvHelper.up(ID_ENV,NAME_ENV, PATH_AUX)

	##USO: oneenv add-role-dir PATH
	when "add-role-dir"
		raise ArgumentError if ARGV.length != 2 
		PATH=ARGV[1]
		OneEnvHelper.addRoleDir(PATH)

	##USO: oneenv update-role NAME
	when "update-role"
		raise ArgumentError if ARGV.length != 2 
		NAME=ARGV[1]
		OneEnvHelper.updateRole(NAME)

	#USO oneenv list-roles
	when "list-roles"
		raise ArgumentError if ARGV.length != 1 
		OneEnvHelper.listRoles()

	#USO oneenv delete-role NAME
	when "delete-role"
		raise ArgumentError if ARGV.length != 2 
		NAME=ARGV[1]
		OneEnvHelper.deleteRole(NAME)

	else
	  puts optparse
	end

rescue OptionParser::InvalidOption, OptionParser::MissingArgument#,ArgumentError
		puts optparse
		exit

end

