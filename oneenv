#!/usr/bin/env ruby

require 'optparse'
require 'oneenvHelper'

options = {}

optparse = OptionParser.new do|opt|
  opt.banner = "Usage: oneenv COMMAND [OPTIONS]"
  opt.separator  ""
  opt.separator  "COMMANDS"
  opt.separator  "     * create <NAME> <ID_TEMPLATE> <NODE_PATH> [-p <DATABAG_PATH>]\n\tCreates a new Enviroment."
  opt.separator  "     * list\n\tLists all Enviroments."
  opt.separator  "     * clone <ID_Env>\n\tClones an existing Enviroment"
  opt.separator  "     * show <ID_Env>\n\tPrints the information of an existing Enviroment"
  opt.separator  "     * delete <ID_Env>\n\tDeletes an existing Enviroment"
  opt.separator  "     * update-node <ID_ENV> [-p <NODE_PATH>]\n\tChanges the path of the Enviroment's node"
  opt.separator  "     * set-databags <ID_ENV> <DB_PATH>\n\tSets a Databag path to an existing Enviroment"
  opt.separator  "     * up <ID_entorno> [-p <CHEF_PATH>]\n\t"
  opt.separator  "     * add-role-dir <PATH>\n\tAdds a Role path"
  opt.separator  "     * update-role <NAME>\n\tUpdates the given Role"
  opt.separator  "     * list-roles\n\tLists the Roles"
  opt.separator  "     * delete-role <NAME>\n\tDeletes a given Role"
  opt.separator  ""
  opt.separator  "Options"

   options[:aux_path] = nil
   opt.on( '-p', '--path PATH', 'Databag,Chef or Node path' ) do |path|
     options[:aux_path] = path
   end

  opt.on("-h","--help","help") do
    puts opt_parser
  end


end


begin 
optparse.parse!

PATH_AUX=options[:aux_path]		

case ARGV[0]

	when 'create'
		raise ArgumentError if ARGV.length !=4 
		NAME=ARGV[1]
		ID=ARGV[2]
		N_PATH=ARGV[3]
		OneEnvHelper.create(NAME,ID,N_PATH,PATH_AUX)		

	when "list"
		raise ArgumentError if ARGV.length != 1
		OneEnvHelper.list()
	
	when "clone"
		raise ArgumentError if ARGV.length != 2
		ID=ARGV[1]
		OneEnvHelper.clone(ID)

	when "show"
		raise ArgumentError if ARGV.length != 2
		ID=ARGV[1]
		OneEnvHelper.show(ID)

	when "delete"
		raise ArgumentError if ARGV.length != 2
		ID=ARGV[1]
		OneEnvHelper.delete(ID)

	when "update-node"
		raise ArgumentError if ARGV.length != 2
		ID=ARGV[1]
		OneEnvHelper.updateNode(ID,PATH_AUX)

	when "set-databags"
		#DB_PATH creo que es un argumento obligatorio
		raise ArgumentError if ARGV.length != 3  		
		ID=ARGV[1]
		DB_PATH=ARGV[2]
		OneEnvHelper.setDatabag(ID,DB_PATH)

	when "up"
		raise ArgumentError if ARGV.length != 2
		ID=ARGV[1]
		OneEnvHelper.up(ID, PATH_AUX)

	when "add-role-dir"
		raise ArgumentError if ARGV.length != 2 
		PATH=ARGV[1]
		OneEnvHelper.addRoleDir(PATH)

	when "update-role"
		raise ArgumentError if ARGV.length != 2 
		NAME=ARGV[1]
		OneEnvHelper.updateRole(NAME)

	when "list-roles"
		raise ArgumentError if ARGV.length != 1 
		OneEnvHelper.listRoles()

	when "delete-role"
		raise ArgumentError if ARGV.length != 2 
		NAME=ARGV[1]
		OneEnvHelper.deleteRole(NAME)

	else
	  puts optparse
	end

rescue OptionParser::InvalidOption, OptionParser::MissingArgument,ArgumentError
		puts optparse
		exit

end

