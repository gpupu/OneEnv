#!/usr/bin/env ruby

require 'optparse'
require 'oneenvHelper'

options = {}

optparse = OptionParser.new do|opt|
  opt.banner = "Usage: oneenv COMMAND [OPTIONS]"
  opt.separator  ""
  opt.separator  "COMMANDS"
  opt.separator  "     * create <NAME> <ID_TEMPLATE> <NODE_PATH> [-p <DATABAG_PATH>]\n\tCreates a new Enviroment."
  opt.separator  "     * list\n\tLists all Enviroments."
  opt.separator  "     * clone [-i <ID_Env>]|[-n <NAME_Env>]\n\tClones an existing Enviroment"
  opt.separator  "     * show [-i <ID_Env>]|[-n <NAME_Env>]\n\tPrints the information of an existing Enviroment"
  opt.separator  "     * delete [-i <ID_Env>]|[-n <NAME_Env>]\n\tDeletes an existing Enviroment"
  opt.separator  "     * update-node [-i <ID_Env>]|[-n <NAME_Env>] [-p <NODE_PATH>]\n\tChanges the path of the Enviroment's node"
  opt.separator  "     * set-databags [-i <ID_Env>]|[-n <NAME_Env>] <DB_PATH>\n\tSets a Databag path to an existing Enviroment"
  opt.separator  "     * up [-i <ID_Env>]|[-n <NAME_Env>] [-p <CHEF_PATH>]\n\tLaunches the given Enviroment"
  opt.separator  ""
  opt.separator  "Options"


   options[:path] = nil
   opt.on( '-p', '--path PATH', 'This is the databag,chef or node path' ) do |path|
     options[:path] = path

   end

   options[:name_env] = nil
   opt.on( '-n', '--name NAME_ENV', 'References environment by Name' ) do |name_env|
     options[:name_env] = name_env
   end

   options[:id_env] = nil
   opt.on( '-i', '--id ID_ENV', 'References environment by Id' ) do |id_env|
     options[:id_env] = id_env

   end

   options[:check_deps] = false
   opt.on( '-c', '--check', 'Check dependencies when up a environment') do |c|
     options[:check_deps] = true

   end


  opt.on("-h","--help","help") do
    puts opt_parse
  end


end


begin 
optparse.parse!

PATH=options[:path]		
NAME_ENV=options[:name_env]		
ID_ENV=options[:id_env]
CHECK=options[:check_deps]


case ARGV[0]
	#USO: oneenv create NAME ID_TEMPLATE NODE_PATH [-p PATH_DATABAG]
	when "create"
		raise ArgumentError if ARGV.length !=4 
		NAME=ARGV[1]
		ID_TEMPLATE=ARGV[2]
		NODE_PATH=ARGV[3]
		OneEnvHelper.create(NAME,ID_TEMPLATE,NODE_PATH,PATH)		
	##USO:oneenv list
	when "list"
		raise ArgumentError if ARGV.length != 1
		OneEnvHelper.list

	##USO:oneenv clone [-i ID_CB]|[-n NAME]
	when "clone"
		raise ArgumentError if ARGV.length != 1
		OneEnvHelper.clone(ID_ENV,NAME_ENV)

	##USO:oneenv show [-i ID_CB]|[-n NAME]
	when "show"
		raise ArgumentError if ARGV.length != 1
		OneEnvHelper.show(ID_ENV,NAME_ENV)

	##USO:oneenv delete [-i ID_CB]|[-n NAME]
	when "delete"
		raise ArgumentError if ARGV.length != 1
		OneEnvHelper.delete(ID_ENV,NAME_ENV)

	##USO: oneenv update-node [-i ID_CB]|[-n NAME] [NODE_PATH]
	when "update-node"
		raise ArgumentError if ARGV.length != 2
		NODE_PATH=ARGV[1]
		OneEnvHelper.updateNode(ID_ENV,NAME_ENV,NODE_PATH)

	##USO:oneenv set-databags [-i ID_CB]|[-n NAME] [DB_PATH]
	when "set-databags"
		#DB_PATH creo que es un argumento obligatorio
		raise ArgumentError if ARGV.length != 2  		
		DB_PATH=ARGV[1]
		OneEnvHelper.setDatabag(ID_ENV,NAME_ENV,DB_PATH)

	##USO:oneenv up [-i ID_CB]|[-n NAME] [-c] [-p PATH_ENV]
	when "up"
		#+raise ArgumentError if options.length < 1 || options.length > 3
		OneEnvHelper.up(ID_ENV.to_i,PATH,CHECK)
	else
	  puts optparse
	end

rescue OptionParser::InvalidOption, OptionParser::MissingArgument,ArgumentError
		puts optparse
		exit

end

