#!/usr/bin/env ruby

# --------------------------------------------------------------------------#
# Copyright 2012   David Baena, Fernando Martínez-Conde, José Gabriel Puado	#
# 																			#
# Licensed under the Apache License, Version 2.0 (the "License"); you may 	#
# not use this file except in compliance with the License. You may obtain 	#
# a copy of the License at 													#
# 																			#
# http://www.apache.org/licenses/LICENSE-2.0 								#
# 																			#
# Unless required by applicable law or agreed to in writing, software 		#
# distributed under the License is distributed on an "AS IS" BASIS, 		#
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 	#
# See the License for the specific language governing permissions and 		#
# limitations under the License. 											#
#---------------------------------------------------------------------------#

ONE_LOCATION=ENV["ONE_LOCATION"]

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby"
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby"
end

$: << RUBY_LIB_LOCATION
#$: << RUBY_LIB_LOCATION+"/cli"

require 'optparse'
require 'cli/oneenv_helper/oneroleHelper'

options = {}

optparse = OptionParser.new do|opt|
  opt.banner = "Usage: oneenv COMMAND [OPTIONS]"
  opt.separator  ""
  opt.separator  "COMMANDS"
  opt.separator  "     * add <PATH>\n\tAdds a Role from path"
  opt.separator  "     * delete <NAME>\n\tDeletes a given Role"
  opt.separator  "     * show <NAME>\n\tShows information about the given Role"
  opt.separator  "     * update <NAME>\n\tUpdates the given Role"
  opt.separator  "     * list\n\tLists the Roles"
  opt.separator  "     * import-repo <PATH>\n\tAdds all Roles from a directory path"
  opt.separator  ""
  opt.separator  "Options"



   options[:name_role] = nil
   opt.on( '-n', '--name NAME_ROLE', 'References role by Name' ) do |name_role|
     options[:name_role] = name_role
   end

   options[:id_role] = nil
   opt.on( '-i', '--id ID_ROLE', 'References role by Id' ) do |id_role|
     options[:id_role] = id_role

   end

  opt.on("-h","--help","help") do
    puts opt_parse
  end


end


begin 
optparse.parse!

NAME_ROLE=options[:name_role]		
ID_ROLE=options[:id_role]



case ARGV[0]

	##USO: onerole add PATH
	when "add"
		raise ArgumentError if ARGV.length != 2 
		PATH=ARGV[1]
		OneRoleHelper.add(PATH)

	#USO onerole delete [-i ID_CB]|[-n NAME]
	when "delete"
		raise ArgumentError if ARGV.length != 1
		OneRoleHelper.delete(ID_ROLE,NAME_ROLE)
	
	#USO onerole show [-i ID_CB]|[-n NAME]
	when "show"
		raise ArgumentError if ARGV.length != 1
		OneRoleHelper.show(ID_ROLE,NAME_ROLE)

	##USO: onerole import-repo PATH
	when "import-repo"
		raise ArgumentError if ARGV.length != 2
		PATH=ARGV[1]
		OneRoleHelper.addDir(PATH)

	##USO: onerole update [-i ID_CB]|[-n NAME]
	when "update"
		raise ArgumentError if ARGV.length != 1
		OneRoleHelper.update_role(ID_ROLE,NAME_ROLE)

	#USO onerole list
	when "list"
		raise ArgumentError if ARGV.length != 1
		OneRoleHelper.list()

	else
	  puts optparse
	end

rescue OptionParser::InvalidOption, OptionParser::MissingArgument,ArgumentError
		puts optparse
		exit

end

