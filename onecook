#!/usr/bin/env ruby

require 'optparse'
require 'onecookHelper'
options = {}

optparse = OptionParser.new do|opt|
  opt.banner =  "USAGE: onecook COMMAND [OPTIONS]"
  opt.separator  ""
  opt.separator  "COMMANDS"
  opt.separator  "     * add <NAME> [-p <PATH>]\n\tAdds a new a Cookbook to the repository."
  opt.separator  "     * list\n\tLists all Cookbooks"
  opt.separator  "     * import-repo <PATH>\n\tImports all the Cookbooks to the repository from the given path"
  opt.separator  "     * delete [-n <COOKBOOK_NAME>]|[-i <COOKBOOK_ID>]\n\tDeletes the given Cookbook"
  opt.separator  "     * show [-n <COOKBOOK_NAME>]|[-i <COOKBOOK_ID>]\n\tPrints the information of the given Cookbook"
  opt.separator  "     * update-cb [-n <COOKBOOK_NAME>]|[-i <COOKBOOK_ID>]\n\tUpdates the given Cookbook"
  opt.separator  "     * check [-n <COOKBOOK_NAME>]|[-i <COOKBOOK_ID>]\n\tChecks the dependencies of the given Cookbook"
  opt.separator  ""
  opt.separator  "OPTIONS"

  options[:repo] = nil
  opt.on("-p","--path REPO","Where the Cookbook is/are") do |repo|
    options[:repo] = repo
  end
 

   options[:name_cb] = nil
   opt.on( '-n', '--name NAME_CB', 'References a Cookbook by Name' ) do |name_cb|
     options[:name_cb] = name_cb
   end

   options[:id_cb] = nil
   opt.on( '-i', '--id ID_CB', 'References a Cookbook by Id' ) do |id_cb|
     options[:id_cb] = id_cb

   end

  opt.on("-h","--help","Shows this message") do
    puts optparse
  end


end



begin 
optparse.parse!
NAMECB=options[:name_cb]		
IDCB=options[:id_cb]
REPO=options[:repo]
case ARGV[0]

	#onecook add NAME [-p PATH]
	when "add"
		raise ArgumentError if ARGV.length != 2
		OneCookHelper.add(ARGV[1],REPO)

	#onecook list
	when "list"
		raise ArgumentError if ARGV.length != 1
		OneCookHelper.list
	#onecook import-repo PATH
	when "import-repo"
		raise ArgumentError if ARGV.length != 2
		PATH=ARGV[1]
		OneCookHelper.import_repo(PATH)
	#onecook show [-i ID_CB]|[-n NAME]
	when "show"
		raise ArgumentError if ARGV.length != 1
		OneCookHelper.show(IDCB,NAMECB)
	#onecook delete [-i ID_CB]|[-n NAME]
	when "delete"
		raise ArgumentError if ARGV.length != 1
		OneCookHelper.delete(IDCB,NAMECB)
	#onecook update [-i ID_CB]|[-n NAME]
	when "update-cb"
		raise ArgumentError if ARGV.length != 1
		OneCookHelper.update_cb(IDCB,NAMECB)
	#onecook check [-i ID_CB]|[-n NAME]
	when "check"
		raise ArgumentError if ARGV.length != 1
		OneCookHelper.check(IDCB,NAMECB)
	else
	  puts optparse
	end

rescue OptionParser::InvalidOption, OptionParser::MissingArgument,ArgumentError
		puts optparse
		exit
end



