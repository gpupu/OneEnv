#!/usr/bin/env ruby

require 'optparse'
require 'onecookHelper'
options = {}

optparse = OptionParser.new do|opt|
  opt.banner = "Usage: onecook [ show | delete | update-cb | check] [-n Name]|[-i Name]\n"
  opt.banner += "Usage: onecook add NAME [-p PATH]\n"
  opt.banner += "Usage: onecook list"
  opt.separator  ""
  opt.separator  "Commands"
  opt.separator  "     add: add a new a cookbok to the repo"
  opt.separator  "     list: list all cookbooks"
  opt.separator  "     import-repo: import all the cookbooks to the repo"
  opt.separator  "     delete: delete a cookbook"
  opt.separator  "     show: prints the information of the cookbook"
  opt.separator  "     update-cb: stop server"
  opt.separator  "     check: check the cookbook's dependencies"
  opt.separator  ""
  opt.separator  "Options"

  options[:repo] = nil
  opt.on("-p","--path REPO","Where is the cookbook") do |repo|
    options[:repo] = repo
  end
 

   options[:name_cb] = nil
   opt.on( '-n', '--name NAME_CB', 'References cookbook by Name' ) do |name_cb|
     options[:name_cb] = name_cb
   end

   options[:id_cb] = nil
   opt.on( '-i', '--id ID_CB', 'References cookbook by Id' ) do |id_cb|
     options[:id_cb] = id_cb

   end

  opt.on("-h","--help","help") do
    puts opt_parser
  end


end


begin 
optparse.parse!
NAMECB=options[:name_cb]		
IDCB=options[:id_cb]
REPO=options[:repo]
case ARGV[0]

	#onecook add NAME [-p PATH]
	when "add"
		raise ArgumentError if ARGV.length != 2
		OneCookHelper.add(ARGV[1],REPO)

	#onecook list
	when "list"
		raise ArgumentError if ARGV.length != 1
		OneCookHelper.list
	#onecook add-dir PATH
	when "import-repo"
		raise ArgumentError if ARGV.length != 2
		PATH=ARGV[1]
		OneCookHelper.import_repo(PATH)
	#onecook show [-i ID_CB] [-n NAME]
	when "show"
		raise ArgumentError if ARGV.length != 1
		OneCookHelper.show(IDCB,NAMECB)
	#onecook delete [-i ID_CB] [-n NAME]
	when "delete"
		raise ArgumentError if ARGV.length != 1
		OneCookHelper.delete(IDCB,NAMECB)
	#onecook update [-i ID_CB] [-n NAME]
	when "update-cb"
		raise ArgumentError if ARGV.length != 1
		OneCookHelper.update_cb(IDCB,NAMECB)
	#onecook check [-i ID_CB] [-n NAME]
	when "check"
		raise ArgumentError if ARGV.length != 1
		OneCookHelper.check(IDCB,NAMECB)
	else
	  puts optparse
	end

rescue OptionParser::InvalidOption, OptionParser::MissingArgument
		puts optparse
		exit
end



